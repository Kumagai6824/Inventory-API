openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JMINHOWSAND682/TEST/1.0.0
info:
  description: 製品在庫を管理するAPI
  version: "1.0.0"
  title: Inventory API
tags:
  - name: InventoryItems
    description: 在庫管理機能
paths:
  /inventory-items:
    get:
      tags:
        - InventoryItems
      summary: 在庫情報の取得
      operationId: getInventoryItems
      description: |
        すべての在庫情報を取得する
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequest'
    post:
      tags:
        - InventoryItems
      summary: 在庫情報の登録
      operationId: createInventoryItem
      description: |
        在庫情報を新規に登録する
      requestBody:
        description: 登録する部品情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/201Created'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequest'
  /inventory-items/{productId}:
    get:
      tags:
        - InventoryItems
      summary: 商品IDによる在庫情報の取得
      operationId: getInventoryItemsByProductId
      description: |
        指定した商品IDと一致する在庫情報を取得する
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
    patch:
      tags:
        - InventoryItems
      summary: 商品IDによる在庫情報の更新
      operationId: patchInventoryItemsByProductId
      description: |
        指定した商品IDと一致する在庫情報を更新する
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: 登録する部品情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/200OK'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
    delete:
      tags:
        - InventoryItems
      summary: 商品IDによる在庫情報の削除
      operationId: deleteInventoryItemsByProductId
      description: |
        指定した商品IDと一致する在庫情報を削除する
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/200OK'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
components:
  schemas:
    InventoryItem:
      type: object
      required:
        - productId
        - productName
        - quantity
      properties:
        productId:
          type: integer
          example: 1
        productName:
          type: string
          example: 'Gear main'
        quantity:
          type: integer
          example: 1000
    PatchRequestBody:
      type: object
      properties:
        productName:
          type: string
          example: 'Gear assy 1'
        quantity:
          type: integer
          example: 2000
    200OK:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Successfull operation'
    201Created:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'New inventory item was successfully created'
    400BadRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Bad request'
    404NotFound:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Product ID does not exist'

openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JMINHOWSAND682/TEST/1.0.0
info:
  description: 製品在庫を管理するAPI
  version: "1.0.0"
  title: Inventory API
tags:
  - name: Products
    description: 商品管理
  - name: InventoryProducts
    description: 在庫管理
paths:
  /products:
    get:
      tags:
        - Products
      summary: 商品情報の取得
      operationId: getProducts
      description: |
        すべての商品情報を取得する
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequest'
    post:
      tags:
        - Products
      summary: 商品の登録
      operationId: createProducts
      description: |
        商品を新規に登録する
      requestBody:
        description: 登録する商品情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/201CreatedProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequest'
  /products/{id}:
    get:
      tags:
        - Products
      summary: IDによる商品情報の取得
      operationId: getProductsById
      description: |
        指定した商品IDと一致する商品情報を取得する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
    patch:
      tags:
        - Products
      summary: 商品IDによる商品情報の更新
      operationId: patchProductsById
      description: |
        指定した商品IDと一致する商品情報を更新する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: 登録する商品情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/200OK'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequest'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
    delete:
      tags:
        - Products
      summary: 商品IDによる商品情報の削除
      operationId: deleteProductsById
      description: |
        指定した商品IDと一致する商品情報を削除する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/200OK'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/409Conflict'
  /products/{id}/histories:
    get:
      tags:
        - Products
      summary: 商品IDによる在庫履歴の全件取得
      operationId: findHistoriesById
      description: |
        指定した商品IDと一致する在庫履歴を全件取得する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Histories'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
  /inventory-products:
    get:
      tags:
        - InventoryProducts
      summary: 在庫情報の取得
      operationId: getInventoryItems
      description: |
        すべての在庫情報を取得する
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryProducts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequest'
  /inventory-products/{productId}:
    get:
      tags:
        - InventoryProducts
      summary: 商品IDによる在庫情報の取得
      operationId: getInventoryItemsByProductId
      description: |
        指定した商品IDと一致する在庫情報を取得する
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryProducts'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
  /inventory-products/received-items/{id}:
    patch:
      tags:
        - InventoryProducts
      summary: 在庫IDによる在庫数の入庫修正
      operationId: patchReceivedInventoryItemById
      description: |
        指定した在庫ID（直前の登録分のみ）の数量を入庫数として修正する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: 修正する数量
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/200UpdatedInventoryProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400UpdatingCreateInventory'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404InventoryProduct'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/409ConflictOfUpdateReceivedInventoryProduct'
  /inventory-products/shipped-items/{id}:
    patch:
      tags:
        - InventoryProducts
      summary: 在庫IDによる在庫数の出庫修正
      operationId: patchShippedInventoryItemById
      description: |
        指定した在庫ID（直前の登録分のみ）の数量を出庫数として修正する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: 修正する数量
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/200UpdatedInventoryProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400UpdatingCreateInventory'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404InventoryProduct'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/409ConflictOfUpdateShippedInventoryProduct'
                    - $ref: '#/components/schemas/409ConflictOfShippingInventoryProduct'
    delete:
      tags:
        - InventoryProducts
      summary: 商品IDによる在庫情報の削除
      operationId: deleteInventoryItemsByProductId
      description: |
        指定した商品IDと一致する在庫情報を削除する
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/200OK'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
  /inventory-products/received-items:
    post:
      tags:
        - InventoryProducts
      summary: 入庫処理
      operationId: receivingInventoryProducts
      description: |
        部品を入庫する
      requestBody:
        description: 入庫する部品情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequestBodyOfInventoryProduct'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/201ReceivedItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequestOfCreateInventory'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
  /inventory-products/shipped-items:
    post:
      tags:
        - InventoryProducts
      summary: 出庫処理
      operationId: shippingInventoryProducts
      description: |
        部品を出庫する
      requestBody:
        description: 出庫する部品情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequestBodyOfInventoryProduct'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/201ShippedItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/400BadRequestOfCreateInventory'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/404NotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/409ConflictOfShippingInventoryProduct'
components:
  schemas:
    Products:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Gear main'
    Histories:
      type: object
      required:
        - id
        - productId
        - name
        - quantity
        - history
      properties:
        id:
          type: integer
          example: 1
        productId:
          type: integer
          example: 1
        name:
          type: string
          example: 'Bolt 1'
        quantity:
          type: integer
          example: 100
        history:
          type: string
          example: '2024-05-10T23:59:59+09:00'
          format: date-time
    InventoryProducts:
      type: object
      required:
        - id
        - product_Id
        - quantity
        - history
      properties:
        id:
          type: integer
          example: 1
        product_Id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1000
        history:
          type: string
          example: '2020-01-31T23:59:59+09:00'
          format: date-time
    PostRequestBodyOfInventoryProduct:
      type: object
      required:
        - product_Id
        - quantity
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1000
    PatchRequestBody:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2000
    200OK:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Successful operation'
    200UpdatedInventoryProduct:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Quantity was successfully updated'
    201CreatedProduct:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'New product was successfully created'
    201ReceivedItem:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'item was successfully received'
    201ShippedItem:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'item was successfully shipped'
    400BadRequest:
      type: object
      required:
        - status
        - message
        - errors
      properties:
        status:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Bad request'
        errors:
          type: array
          items:
            oneOf:
              - type: object
                properties:
                  field:
                    type: string
                    example: 'name'
                  message:
                    type: string
                    example: '空白は許可されていません'
              - type: object
                properties:
                  field:
                    type: string
                    example: 'name'
                  message:
                    type: string
                    example: '0 から 30 の間のサイズにしてください'
    400BadRequestOfCreateInventory:
      type: object
      required:
        - status
        - message
        - errors
      properties:
        status:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Bad request'
        errors:
          type: array
          items:
            oneOf:
              - type: object
                properties:
                  field:
                    type: string
                    example: 'quantity'
                  message:
                    type: string
                    example: 'must be greater than or equal to 1'
    400UpdatingCreateInventory:
      type: object
      required:
        - status
        - message
        - errors
      properties:
        status:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Bad request'
        errors:
          type: array
          items:
            oneOf:
              - type: object
                properties:
                  field:
                    type: string
                    example: 'quantity'
                  message:
                    type: string
                    example: 'must be greater than or equal to 1'

    404NotFound:
      type: object
      required:
        - path
        - error
        - timestamp
        - message
        - status
      properties:
        path:
          type: string
          example: '/products/0'
        error:
          type: string
          example:
            'Not Found'
        timestamp:
          type: string
          example:
            '2024-03-26T22:19:19.376914800+09:00[Asia/Tokyo]'
          format: date-time
        message:
          type: string
          example: 'Product ID:0 does not exist'
        status:
          type: string
          example:
            '404'
    404InventoryProduct:
      type: object
      required:
        - path
        - error
        - timestamp
        - message
        - status
      properties:
        path:
          type: string
          example: '/inventory-products/0'
        error:
          type: string
          example:
            'Not Found'
        timestamp:
          type: string
          example:
            '2024-03-26T22:19:19.376914800+09:00[Asia/Tokyo]'
          format: date-time
        message:
          type: string
          example: 'ID:0 does not exist'
        status:
          type: string
          example:
            '404'
    409Conflict:
      type: object
      required:
        - status
        - path
        - error
        - timestamp
        - message
      properties:
        status:
          type: string
          example:
            '409'
        path:
          type: string
          example: '/products/1'
        error:
          type: string
          example:
            'Conflict'
        timestamp:
          type: string
          example:
            '2024-03-26T22:19:19.376914800+09:00[Asia/Tokyo]'
          format: date-time
        message:
          type: string
          example: 'Cannot delete Product because the quantity is not 0'
    409ConflictOfShippingInventoryProduct:
      type: object
      required:
        - status
        - path
        - error
        - timestamp
        - message
      properties:
        status:
          type: string
          example:
            '409'
        path:
          type: string
          example: '/inventory-products/shipped-items'
        error:
          type: string
          example:
            'Conflict'
        timestamp:
          type: string
          example:
            '2024-03-26T22:19:19.376914800+09:00[Asia/Tokyo]'
          format: date-time
        message:
          type: string
          example: 'Inventory shortage, only 10 items left'
    409ConflictOfUpdateReceivedInventoryProduct:
      type: object
      required:
        - status
        - path
        - error
        - timestamp
        - message
      properties:
        status:
          type: string
          example:
            '409'
        path:
          type: string
          example: '/inventory-products/received-items/1'
        error:
          type: string
          example:
            'Conflict'
        timestamp:
          type: string
          example:
            '2024-03-26T22:19:19.376914800+09:00[Asia/Tokyo]'
          format: date-time
        message:
          type: string
          example: 'Cannot update id: 1 , Only the last update can be altered.'
    409ConflictOfUpdateShippedInventoryProduct:
      type: object
      required:
        - status
        - path
        - error
        - timestamp
        - message
      properties:
        status:
          type: string
          example:
            '409'
        path:
          type: string
          example: '/inventory-products/shipped-items/1'
        error:
          type: string
          example:
            'Conflict'
        timestamp:
          type: string
          example:
            '2024-03-26T22:19:19.376914800+09:00[Asia/Tokyo]'
          format: date-time
        message:
          type: string
          example: 'Cannot update id: 1 , Only the last update can be altered.'
